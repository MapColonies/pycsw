{{- $chartName := include "pycsw.name" . -}}
{{- $serviceName := include "service.fullname" . -}}
{{- $releaseName := .Release.Name -}}

map $msec $nanosec {
    "~*(\d{10})\.(\d{3})" "$1$2000000";
}

upstream pycsw {
    server {{ $serviceName }}:{{ .Values.targetPort }};
}

server {
        listen      {{ .Values.targetPort }};
        # the domain name it will serve for
        server_name pycsw;
        # max upload size, adjust to taste
        keepalive_timeout  500;
        proxy_connect_timeout       600;
        proxy_send_timeout          600;
        send_timeout                600;
        client_max_body_size        5000;
        client_header_timeout       600;
        client_body_timeout         600;
        client_header_buffer_size   12288; # 12K
        large_client_header_buffers 4 12288; # 12K
        fastcgi_read_timeout        300;
        location /liveness {
            return 200 "I'm alive\n";
    }
    location / {
        {{ if .Values.authorization.enabled }}
        set $domain {{ .Values.authorization.domain }};
        auth_request /_validate_jwt;
        {{ end }}

        include uwsgi_params;
        uwsgi_pass pycsw;
        uwsgi_hide_header    Set-Cookie;  # ensures the header will not be passed back to the client
        uwsgi_param HTTP_Cookie ""; # ensures that a client cannot pass any prior cookies to the webapp and spoil your cache
    }

    {{ if .Values.authorization.enabled }}
    location = /_validate_jwt {
        internal;

        js_content auth.opaAuth;
    }

    location = /opa {
        internal;

        proxy_set_header Content-Type application/json;
        proxy_pass {{ .Values.authorization.url }};
    }
    {{ end }}        
}