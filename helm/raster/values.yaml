global:
  cloudProvider: 
    dockerRegistryUrl: my-registry-url.io
    imagePullSecretName: 'my-registry-secret'
    flavor: openshift
  tracing: {}
  metrics: {}
  environment: {}
  authentication:
    jwtPublicKeySecretName: map-colonies-jwks

enabled: true
environment: development
replicaCount: 5
initialDelaySeconds: 60
resetOnConfigChange: true
splunkIndex: ''
imagePullPolicy: Always

cloudProvider:
  dockerRegistryUrl: my-registry-url.io
  imagePullSecretName: 'my-registry-secret'
  flavor: openshift

authentication:
  ca:
    enabled: false
    useExternal: false
    externalSecretName: ''
  ssl:
    enabled: false
    useExternal: false
    externalSecretName: ''

caSecretName: ''
caPath: '/usr/local/share/ca-certificates'
caKey: 'ca.crt'

rasterCommon:
  ca:
    secretName: ''
    path: '/usr/local/share/ca-certificates'
    key: 'ca.crt'
  db:
    host: "localhost"
    name: "raster"
    port: 5432
    sslEnabled: false
    rejectUnauthorized: true
    secrets:
      useExternal: true
      externalSecretName: ''
      caFileKey: "caFileKey"
      certFileKey: "certFileKey"
      keyFileKey: "keyFileKey"


image:
  repository: pycsw
  tag: 'latest'

servicePort: 8080
internalServicePort: 80
pycswPort: 8000
nodePort: 30018

env:
  loglevel: WARNING
  maxrecords: null
  logfile: ''
  profiles: mc_raster
  logFormat: >-
    %(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"
    %({x-forwarded-for}i)s %(L)s
  uwsgi:
    processes: 6
    threads: 10
  cors:
    enabled: true
    allowedOrigin: '*'
    allowedHeaders: ''
  db:
    schema: RasterCatalogManager
    requirePassword: true
  tracing:
    enabled: false
    url: http://localhost:55681/v1/trace
  metrics:
    enabled: false
    url: http://localhost:55681/v1/metrics

resources:
  enabled: true
  value:
    limits:
      cpu: 2
      memory: 1200Mi
    requests:
      cpu: 2
      memory: 1200Mi

nginx:
  enabled: true
  replicaCount: 2
  image:
    repository: nginx-otel-unprivileged
    tag: 'v1.0.0' 
  port: 8080
  internalServicePort: 80
  targetPort: 8080
  nodePort: 30001
  authorization:
    enabled: true
    domain: 'raster'
    url: http://opa-la-opa-service.integration/v1/data/http/authz/decision

  defaultConf: |-
    {{- $chartName := include "pycsw.name" . -}}
    {{- $serviceName := include "service.fullname" . -}}
    {{- $releaseName := .Release.Name -}}

    map $msec $nanosec {
        "~*(\d{10})\.(\d{3})" "$1$2000000";
    }

    upstream pycsw {
        server {{ $serviceName }}:{{ .Values.servicePort }};
    }

    js_import main from "/etc/nginx/jwt.js";
    js_set $jwt_payload_sub main.jwt_payload_sub;

    server {
        listen      {{ .Values.nginx.targetPort }};
        # the domain name it will serve for
        server_name pycsw;
        # max upload size, adjust to taste
        keepalive_timeout  500;
        proxy_connect_timeout       600;
        proxy_send_timeout          600;
        send_timeout                600;
        client_max_body_size        5000;
        client_header_timeout       600;
        client_body_timeout         600;
        client_header_buffer_size   12288; # 12K
        large_client_header_buffers 4 12288; # 12K
        fastcgi_read_timeout        300;
        location /liveness {
            return 200 "I'm alive\n";
        }
        location / {
            include uwsgi_params;
            uwsgi_pass pycsw;
            uwsgi_hide_header    Set-Cookie;  # ensures the header will not be passed back to the client
            uwsgi_param HTTP_Cookie ""; # ensures that a client cannot pass any prior cookies to the webapp and spoil your cache
        }
    }

  nginxConf: |-
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;
    load_module modules/ngx_http_js_module.so;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format json escape=json 
        '{'
            '"Timestamp": $nanosec,'
            '"Attributes": {'
                '"time_local": "$time_local",'
                '"http.status_code": $status,'
                '"http.url": "$http_referer",'
                '"http.x_forwarded_for": "$http_x_forwarded_for",'
                '"http.user_agent": "$http_user_agent",'
                '"http.request_time": $request_time,'
                '"request_length": "$request_length",'
                '"http.host": "$host",'
                '"upstream_response_time": $upstream_response_time,'
                '"body_bytes_sent": "$body_bytes_sent",'
                '"remote_addr": "$remote_addr",'
                '"remote_user": "$remote_user",'
                '"connection":"$connection",'
                '"connection_requests": "$connection_requests",'
                '"connections_active": "$connections_active",'
                '"connections_reading": "$connections_reading",'
                '"connections_writing": "$connections_writing",'
                '"connections_waiting": "$connections_waiting"'
            '},'
            #'"TraceId": "$opentelemetry_trace_id",' ## this is a byte sequence (hex-encoded in JSON)
            #'"SpanId": "$opentelemetry_span_id",'
            '"TokenUser": "$jwt_payload_sub",'
            '"SeverityText": "INFO",'
            '"SeverityNumber": 9,'
            '"RequestBody": "$request_body",'
            '"Body": "$request"'
        '}';

        access_log  /var/log/nginx/access.log json;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
    }

    

  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi     

  route:
    enabled: true
    path: /api/raster/v1
    host: 
    https: true
    timeout:
      enabled: false # defaults to 30s by openshift
      duration: 60s # supported units (us, ms, s, m, h, d)
    useCert: false

  ingress:
    enabled: false
    path: /api/raster/v1
    host: 'localhost'
    tls: 
      enabled: true
      useExternal: ''
