{{- $chartName := include "pycsw.name" . -}}
{{- $fullName := include "pycsw.fullname" . -}}
{{- $opala := (include "merged.opala" . ) | fromYaml }}

upstream pycsw {
    server {{ $fullName }}:{{ .Values.env.port }};
}

server {
    listen      {{ .Values.nginx.targetPort }};
    # the domain name it will serve for
    server_name pycsw;
    # max upload size, adjust to taste
    keepalive_timeout  500;
    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    send_timeout                600;
    client_max_body_size        5000;
    client_header_timeout       600;
    client_body_timeout         600;
    client_header_buffer_size   12288; # 12K
    large_client_header_buffers 4 12288; # 12K
    fastcgi_read_timeout        300;
    location /liveness {
        access_log    off;
        log_not_found off;
        return 200 "I'm alive\n";
    }
    location / {
        set $original_method $request_method;
        set $original_args $args;

        {{ if eq $opala.enabled "true" }}
        set $domain {{ $opala.domain }};
        auth_request /_validate_jwt;
        {{ end }}

        include uwsgi_params;
        uwsgi_pass pycsw;
        uwsgi_hide_header    Set-Cookie;  # ensures the header will not be passed back to the client
        uwsgi_param HTTP_Cookie ""; # ensures that a client cannot pass any prior cookies to the webapp and spoil your cache
    }

    {{ if eq $opala.enabled "true" }}
    location = /_validate_jwt {
      internal;

      js_content auth.opaAuth;
    }

    location = /opa {
      internal;

      proxy_set_header Content-Type application/json;
      proxy_pass {{ $opala.url }};
    }    
    {{ end }}
}
